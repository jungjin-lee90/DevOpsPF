[
  {
    "title": "AWS EC2와 Docker를 활용한 CI/CD",
    "date": "2025-05",
    "tags": ["Jenkins", "Docker", "Github", "EC2", "AWS"],
    "summary": "GitHub → Jenkins → Docker 이미지 빌드 자동화 구성 실험.",
    "code_path": "https://raw.githubusercontent.com/jungjin-lee90/resume/main/Jenkinsfile",
    "image": "jenkins_ci_diagram.png",
    "result": "Jenkins 빌드 후 Docker 이미지가 정상적으로 푸시되었고, 트리거 기반 빌드 자동화 성공.",
    "resultimage": "jenkins_ci_ui.png",
    "reflection": "EC2에 Jenkins를 설치하고, 보안 그룹을 통해 특정 포트로의 접근만 허용하는 구조로 구성하였다.\nGitHub 저장소에서 Push 이벤트가 발생하면 WebHook을 통해 Jenkins EC2 인스턴스로 이벤트가 전달되며,\n해당 이벤트 정보를 기반으로 빌드 이름을 동적으로 정의하도록 구현하였다.\nDocker 이미지 빌드 단계에서는 현재 시간을 태그로 부여하여 이미지가 덮어씌워지지 않도록 처리하였고,\n30초 간격의 헬스체크를 추가하여 컨테이너 상태를 지속적으로 확인하였다.\n마지막으로 빌드가 완료되면 소스코드를 압축한 후 GitHub Release에 업로드하여 버전별 파일 관리가 가능하도록 구성하였다.\n\n파이프라인 구축을 하고 나서 아쉬웠던 부분은 세 가지 정도 있었다. 첫째로는 보안적인 부분이었다. 보안 그룹을 통한 접근 통제만 하고 있었기 때문에 특정 포트로의 접근이 자유롭게 가능했다는 점이 아쉬웠다. 이 점을 보완하려면 ALB와 HTTPS의 적용 또는 Nginx 같은 프록시 서버의 사용 등이 있을 것 같다.\n둘째로는 Jenkins 서버와 Docker 배포 인스턴스가 동일한 인스턴스였다는 점이다. 이런 구조에서는 자원 부족 현상이 발생할 수 있기 때문에, ECR을 사용하여 Docker 이미지를 분리했어야 했다고 생각한다.\n세번째로 branch의 분리였다. 기본적으로 프로젝트를 진행하면 개발과 릴리즈 버전을 따로 관리하는데, 이번 프로젝트에서는 시간이 부족했기에 하나의 branch에 작업을 진행하여 확장성이 많이 부족했다고 생각한다.\n이번 프로젝트는 아무래도 EC2를 활용하다 보니 비용이 발생하는 프로젝트였기에, 완전한 운영형 프로젝트라고 보기는 어려웠다. 다음 프로젝트에서는 이러한 보완점들을 개선하여 좀 더 실용적인 구조로 진행할 계획이다."
  },
  {
    "title": "Jenkins + SVN으로 CI/CD 구축",
    "date": "2024-04-21",
    "tags": ["Jenkins", "SVN", "CI/CD"],
    "summary": "SVN 기반 형상 관리 환경에서 Jenkins를 활용한 CI/CD 자동화를 구축하는 과정을 정리했다. Jenkins 설치 및 SVN 저장소 연동부터 시작해 Poll SCM과 WebHook 트리거 방식 비교, 커밋 메시지 기반 빌드 제목 설정, 빌드 오류 해결까지 실제 업무에서 겪을 수 있는 흐름을 그대로 반영하였다.",
    "code_path": "https://raw.githubusercontent.com/jungjin-lee90/DevOpsPF/main/other/SVNProjectCode.sh",
    "resultimage": "svnproject.png",
    "result": "SVN 저장소에서 커밋이 발생하면 Jenkins가 Poll SCM 방식으로 5분 간격으로 확인하여 변경사항을 체크하도록 구현.",
    "reflection": "초기에는 Poll SCM 주기로 인해 실시간성이 부족하다고 판단하여 WebHook 방식으로 변경하였다. 그러나 변경 후 인코딩 문제, 실시간으로 커밋을 체크할 수는 있지만 SVN이라는 오래된 형상관리 도구로 인해 발생하는 커밋 메시지 불일치 현상 등 여러 문제가 발생하였다. 이러한 문제를 해결하기 위해 Jenkins 플러그인 코드까지 수정해보았지만, 결국 정보를 정확히 일치시키는 것은 불가능하다고 판단하여 다시 Poll SCM 방식으로 선회하였다.\n\nSVN은 GitHub처럼 푸시에 대한 정보를 자체적으로 전달해주는 기능이 없기 때문에 수동으로 처리해야 했고, Jenkins에서는 이 부분조차 직접 제어할 수 없었기 때문에, 결론적으로는 SVN과 Jenkins는 궁합이 맞지 않는 조합이라고 판단하게 되었다. Jenkins를 제대로 활용하려면 우선적으로 SVN에서 GitHub로 형상관리 도구를 전환하는 것이 필요하다고 생각한다."
  }
]

